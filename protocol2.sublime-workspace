{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"PROTOCOL",
				"PROTOCOL2_DECLARE_VIRTUAL_SERIALIZE_FUNCTIONS"
			],
			[
				"aggregate",
				"aggregateReadHeader"
			],
			[
				"PROTOCOL2_ERROR_SER",
				"PROTOCOL2_ERROR_SERIALIZE_HEADER_FAILED"
			],
			[
				"aggreg",
				"aggregatePacketHeader"
			],
			[
				"PROTOCOL2_ERROR_FAIL",
				"PROTOCOL2_ERROR_SERIALIZE_HEADER_FAILED"
			],
			[
				"PROTOCOL2_ERROR",
				"PROTOCOL2_ERROR_CREATE_PACKET_FAILED"
			],
			[
				"MaxPe",
				"MaxPacketsPerIteration"
			],
			[
				"numPackets",
				"numPacketsRead"
			],
			[
				"max",
				"maxPacketsToRead"
			],
			[
				"MaxPackets",
				"MaxPacketsPerIteration"
			],
			[
				"numPAckets",
				"numPacketsWritten"
			],
			[
				"previous",
				"previous"
			],
			[
				"prve",
				"previous"
			],
			[
				"nu",
				"previousChunkNumSlices"
			],
			[
				"force",
				"forceAckPreviousChunk"
			],
			[
				"Packet",
				"PacketBufferEntry"
			],
			[
				"Max",
				"MaxFragmentSize"
			],
			[
				"SERIALIZE_",
				"PROTOCOL2_SERIALIZE_OBJECT"
			],
			[
				"rec",
				"receivedFragments"
			],
			[
				"MaxFrag",
				"MaxFragmentsPerPacket"
			],
			[
				"total",
				"total_fragments"
			],
			[
				"sequence",
				"sequence_difference"
			],
			[
				"MAX",
				"MaxFragmentSize"
			],
			[
				"PROTOCOL2_ERR",
				"PROTOCOL2_STREAM_ERROR_NONE"
			],
			[
				"TEST_PACKET",
				"TEST_PACKET_NUM_TYPES"
			],
			[
				"SYNC_MODE_",
				"SYNC_MODE_ADAPTIVE_SMOOTHING"
			],
			[
				"SYNC_MODE_QU",
				"SYNC_MODE_QUANTIZE_ON_BOTH_SIDES"
			],
			[
				"SYNC",
				"SYNC_MODE_UNCOMPRESSED"
			],
			[
				"min",
				"min_ticks_ahead"
			],
			[
				"old_st",
				"oldest_input_in_packet"
			],
			[
				"ready_to_",
				"ready_to_apply_adjustment_offset"
			],
			[
				"time_",
				"time_last_dropped_input"
			],
			[
				"client",
				"client_input_data"
			],
			[
				"server_cet",
				"server_get_client_input"
			],
			[
				"Input",
				"InputSlidingWindowSize"
			],
			[
				"ready",
				"ready_to_apply_sync"
			],
			[
				"client_",
				"client_sync_data"
			],
			[
				"CLIENT",
				"CLIENT_SENDING_CONNECT_REQUEST"
			],
			[
				"time",
				"time_last_packet_received"
			],
			[
				"tim",
				"time_last_packet_received"
			],
			[
				"PACKET",
				"PACKET_TYPE_CONNECTION_REQUEST"
			],
			[
				"PACKET_TYPE",
				"PACKET_TYPE_INPUT"
			],
			[
				"PACKET_TYPE_",
				"PACKET_TYPE_CONNECTION_DENIED"
			],
			[
				"PACK",
				"PACKET_TYPE_CONNECTION_REQUEST"
			],
			[
				"COMP",
				"COMPRESSION_MODE_ORIENTATION"
			],
			[
				"COM",
				"COMPRESSION_MODE_NO_VELOCITY"
			],
			[
				"position",
				"position_error_dist_squared"
			],
			[
				"pos",
				"position_error"
			],
			[
				"STATE",
				"STATEFUL_MODE_INPUT_AND_STATE"
			],
			[
				"Priority",
				"CubePriorityInfo"
			],
			[
				"Quant",
				"QuantizedPositionBoundXY"
			],
			[
				"Position",
				"QuantizedPositionBoundXY"
			],
			[
				"Quantiz",
				"QuantizedSnapshotWithVelocity"
			],
			[
				"Qua",
				"QuantizedCubeState"
			],
			[
				"linera_",
				"linear_velocity_y"
			],
			[
				"DELTA_MODE",
				"DELTA_MODE_RELATIVE_INDEX"
			],
			[
				"COMPRESSION_MODE",
				"COMPRESSION_MODE_POSITION"
			],
			[
				"abso",
				"absolute_position_bits"
			],
			[
				"absol",
				"absolute_quaternion_bits"
			],
			[
				"ab",
				"absolute_quaternion_bits"
			],
			[
				"Rel",
				"RelativeQuaternionLargeW"
			],
			[
				"quater",
				"quaternion_negative_w"
			],
			[
				"COMPRESSION",
				"COMPRESSION_MODE_QUANTIZE_POSITION"
			],
			[
				"QuantizedPosition",
				"QuantizedPositionBoundXY"
			],
			[
				"snap",
				"snapshot_sequence_buffer"
			],
			[
				"CONTEXT_SNAP",
				"CONTEXT_SNAPSHOT_SLIDING_WINDOW"
			],
			[
				"ntework",
				"network_simulator"
			],
			[
				"snapshot",
				"snapshot_sliding_window"
			],
			[
				"m_ba",
				"m_bandwidthExclude"
			],
			[
				"received",
				"received_snapshot_this_frame"
			],
			[
				"COMPRES",
				"COMPRESSION_MODE_UNCOMPRESSED"
			],
			[
				"INT",
				"SNAPSHOT_INTERPOLATION_HERMITE"
			],
			[
				"SNAPSHOT_MODE_",
				"SNAPSHOT_MODE_LINEAR_INTERPOLATION_10PPS"
			],
			[
				"SNAPSHOT_MODE",
				"SNAPSHOT_MODE_NAIVE_60PPS_JITTER"
			],
			[
				"interpo",
				"interpolation_start_time"
			],
			[
				"inter",
				"interpolation_start_time"
			],
			[
				"SNAPSHOT_IN",
				"SNAPSHOT_INTERPOLATION_HERMITE"
			],
			[
				"SNAPSHOT",
				"SNAPSHOT_INTERPOLATION_LINEAR"
			],
			[
				"LOCK",
				"LOCKSTEP_MODE_DETERMINISTIC"
			],
			[
				"mode",
				"snapshot_mode_data"
			],
			[
				"STONE",
				"STONE_MODE_HDR_TEST"
			],
			[
				"vec",
				"vectorial"
			],
			[
				"new",
				"network_simulator"
			],
			[
				"playout",
				"playout_delay_buffer"
			],
			[
				"LOK",
				"LOCKSTEP_PACKET_INPUTS"
			],
			[
				"in",
				"input_sliding_window"
			],
			[
				"CommandLin",
				"CommandLineBufferSize"
			],
			[
				"model",
				"modelViewProjection"
			],
			[
				"test_stone_board_",
				"test_stone_board_collision_none"
			],
			[
				"mesh",
				"mesh_filename"
			],
			[
				"command",
				"CommandHistorySize"
			],
			[
				"commandHistory",
				"commandHistoryIsEmpty"
			],
			[
				"Stone",
				"stoneSizeNames"
			],
			[
				"vertex",
				"VertexPosition"
			],
			[
				"last",
				"lastConnectedClientTime"
			],
			[
				"CLIENT_STT",
				"CLIENT_STATE_CONNECTED"
			],
			[
				"test_client_and_",
				"test_client_and_server_data_reconnect"
			],
			[
				"datablock",
				"dataBlockReceiver"
			],
			[
				"ClientServerDatABlock",
				"ClientServerDataBlockSender"
			],
			[
				"ClientSer",
				"ClientServerDataBlockSender"
			],
			[
				"test_",
				"test_data_block_send_and_receive_packet_loss"
			],
			[
				"CLIENT_STATE_SENDING",
				"CLIENT_STATE_SENDING_CLIENT_DATA"
			],
			[
				"UpdatESend",
				"UpdateSendClientData"
			],
			[
				"read",
				"readyForConnection"
			],
			[
				"SERVER",
				"SERVER_CLIENT_STATE_READY_FOR_CONNECTION"
			],
			[
				"fargmen",
				"fragmentId"
			],
			[
				"ack",
				"ackedFragment"
			],
			[
				"CLIENH_",
				"CLIENT_SERVER_PACKET_CONNECTION_CHALLENGE"
			],
			[
				"CLIENT_STATE_",
				"CLIENT_STATE_RECEIVING_SERVER_DATA"
			],
			[
				"m_num",
				"m_numServerDataFragments"
			],
			[
				"CLIENT_",
				"CLIENT_SERVER_PACKET_CONNECTION"
			],
			[
				"CreateChann",
				"CreateChannelDataInternal"
			],
			[
				"NUM",
				"NUM_CLIENT_SERVER_PACKETS"
			],
			[
				"PROTOCOL_",
				"PROTOCOL_USE_RESOLVER"
			],
			[
				"Block",
				"BlockMessageType"
			],
			[
				"RES",
				"RESOLVE_IN_PROGRESS"
			],
			[
				"RESOL",
				"RESOLVE_IN_PROGRESS"
			],
			[
				"R",
				"ResolveResult"
			],
			[
				"RESOLVE",
				"RESOLVE_SUCCEEDED"
			],
			[
				"REsolv",
				"ResolveWrapper"
			],
			[
				"BSD_SOCKET_COUNTER_SERIAL",
				"BSD_SOCKET_COUNTER_SERIALIZE_READ_OVERFLOW"
			],
			[
				"CLIENT_ERROR_Co",
				"CLIENT_ERROR_ConnectionError"
			],
			[
				"REL",
				"RELIABLE_MESSAGE_CHANNEL_ERROR_SEND_QUEUE_FULL"
			],
			[
				"BSD_S",
				"BSD_SOCKET_ERROR_NONE"
			],
			[
				"Small",
				"MaxSmallBlockSize"
			],
			[
				"resol",
				"ResolveWrapper"
			],
			[
				"m_oldest",
				"m_oldestUnackedMessageId"
			],
			[
				"m_",
				"m_oldestUnackedMessageId"
			]
		]
	},
	"buffers":
	[
	],
	"build_system": "Packages/User/C++11 (Server).sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/User/Markdown Render [Grip].sublime-build",
					""
				],
				[
					"Packages/User/Markdown Render [Grip].sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/User/Markdown Render [Grip].sublime-build",
					""
				],
				[
					"Packages/User/Markdown Render [Grip].sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/User/C++11 (Server).sublime-build",
					""
				],
				[
					"Packages/User/C++11 (Server).sublime-build",
					"Run"
				]
			],
			[
				"Packages/User/C++11 (Server).sublime-build",
				"Run"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 107.0,
		"last_filter": "TODO",
		"selected_items":
		[
			[
				"TODO",
				"View: Toggle Open Files in Side Bar"
			],
			[
				"syntax mark",
				"Set Syntax: Markdown"
			],
			[
				"install pac",
				"Package Control: Install Package"
			],
			[
				"install package",
				"Package Control: Install Package"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"package install",
				"Package Control: Install Package"
			],
			[
				"Packinst",
				"Package Control: Install Package"
			],
			[
				"git",
				"Git: Commit history"
			],
			[
				"",
				"Package Control: Discover Packages"
			],
			[
				"Pack",
				"Package Control: Disable Package"
			],
			[
				"Package",
				"Preferences: Browse Packages"
			],
			[
				"Clang",
				"Preferences: SublimeClang Settings – User"
			],
			[
				"Sub",
				"Preferences: SublimeClang Settings – Default"
			],
			[
				"Install",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 416.0,
		"history":
		[
			"print 'hello'",
			"print \"hello\"",
			"ls",
			"ls -al",
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": true,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/gaffer/git/protocol2"
	],
	"file_history":
	[
		"/Users/gaffer/Desktop/Building a Game Network Protocol/premake5.lua",
		"/Users/gaffer/git/protocol2/premake5.lua",
		"/Users/gaffer/git/protocol2/005_packet_aggregation.cpp",
		"/Users/gaffer/git/protocol2/001_reading_and_writing_packets.cpp",
		"/Users/gaffer/git/protocol2/002_serialization_strategies.cpp",
		"/Users/gaffer/git/protocol2/003_packet_fragmentation_and_reassembly.cpp",
		"/Users/gaffer/git/protocol2/004_sending_large_blocks_of_data.cpp",
		"/Users/gaffer/git/protocol2/006_reliable_packets.cpp",
		"/Users/gaffer/git/protocol2/TODO",
		"/Users/gaffer/git/protocol2/test.cpp",
		"/Users/gaffer/git/protocol2/protocol2.h",
		"/Users/gaffer/git/protocol2/CHANGES",
		"/Users/gaffer/Backup/netgame/02 - Virtual Connection over UDP/Net.h",
		"/Users/gaffer/git/protocol2/network2.h",
		"/Users/gaffer/git/protocol2/premake4.lua",
		"/Users/gaffer/.ssh/known_hosts",
		"/Users/gaffer/Backup/transport2/src/TransportSockets.cpp",
		"/Users/gaffer/Backup/transport2/include/TransportSockets.h",
		"/Volumes/FLASH DRIVE/test.txt",
		"/Users/gaffer/Documents/STUDY",
		"/Users/gaffer/Documents/TODO",
		"/Users/gaffer/Documents/HOME",
		"/Users/gaffer/source code/patreon.txt",
		"/Users/gaffer/Documents/CLOTHES",
		"/Users/gaffer/Documents/BUSINESS",
		"/Users/gaffer/Documents/gafferongames.com",
		"/Users/gaffer/Documents/CHORES",
		"/Users/gaffer/Documents/FINANCES",
		"/Users/gaffer/Documents/CORPORATE",
		"/Users/gaffer/Documents/GAFFERONGAMES",
		"/Users/gaffer/Documents/HOME OFFICE",
		"/Users/gaffer/Documents/INTUIT",
		"/Users/gaffer/Documents/OPPORTUNITIES",
		"/Users/gaffer/Documents/MONEY",
		"/Users/gaffer/Documents/SECURITY",
		"/Users/gaffer/Documents/PREP",
		"/Users/gaffer/Documents/PLANNING",
		"/Users/gaffer/Documents/STOCKS",
		"/Users/gaffer/Documents/STUFF",
		"/Users/gaffer/Documents/THIS WEEK",
		"/Users/gaffer/Documents/UNITY",
		"/Volumes/NO NAME/dropbox.txt",
		"/Users/gaffer/Desktop/patreon.txt",
		"/Users/gaffer/Documents/WIRE TRANSFER",
		"/Users/gaffer/Downloads/gafferongames.wordpress.2016-04-03.xml",
		"/Users/gaffer/Desktop/Building a Game Network Protocol/premake4.lua",
		"/Users/gaffer/git/protocol2/vectorial/quat4f.h",
		"/Users/gaffer/Desktop/Serialization Strategies/premake4.lua",
		"/Users/gaffer/git/protocol2/vectorial/vec3f.h",
		"/Users/gaffer/git/protocol2/vectorial/vec4f.h",
		"/Users/gaffer/Desktop/Reading and Writing Packets/001_reading_and_writing_packets.cpp",
		"/Users/gaffer/Desktop/Reading and Writing Packets/premake4.lua",
		"/Users/gaffer/Desktop/Reading and Writing Packets/test.cpp",
		"/Users/gaffer/git/protocol2/002_packet_fragmentation_and_reassembly.cpp",
		"/Users/gaffer/git/protocol2/005_reliable_packets.cpp",
		"/Users/gaffer/git/protocol2/004_packet_aggregation.cpp",
		"/Users/gaffer/git/protocol2/003_sending_large_blocks_of_data_quickly_and_reliably.cpp",
		"/Users/gaffer/git/protocol2/protocol2-old.h",
		"/Users/gaffer/Desktop/taxes/corporate 2015/working.txt",
		"/Users/gaffer/Documents/DONE",
		"/Users/gaffer/Documents/ADVISORS",
		"/Users/gaffer/Documents/WORKLOG",
		"/Users/gaffer/Documents/WORK",
		"/Users/gaffer/Documents/RESPAWN RECS",
		"/Users/gaffer/Documents/HEDGING",
		"/Users/gaffer/Downloads/JPMC.CSV",
		"/Users/gaffer/Documents/BURN RATE",
		"/Users/gaffer/Desktop/taxes/working.txt",
		"/Users/gaffer/git/protocol2/GAME IDEAS",
		"/Users/gaffer/git/protocol2/output.txt",
		"/Users/gaffer/Desktop/Simulator.cpp",
		"/Users/gaffer/git/protocol/tests/Network/TestAddress.cpp",
		"/Users/gaffer/Desktop/Address.cpp",
		"/Users/gaffer/git/protocol/src/Network/Enums.h",
		"/Users/gaffer/git/protocol/src/Core/Config.h",
		"/Users/gaffer/Desktop/Address.h",
		"/Users/gaffer/Desktop/BSDSocket.cpp",
		"/Users/gaffer/Desktop/Network.cpp",
		"/Users/gaffer/git/protocol/src/Network/Network.h",
		"/Users/gaffer/Desktop/Network.h",
		"/Users/gaffer/Desktop/Simulator.h",
		"/Users/gaffer/Desktop/taxes/profit.txt",
		"/Users/gaffer/Documents/AUSTRALIA",
		"/Users/gaffer/Documents/OUTBACK",
		"/Users/gaffer/git/protocol2/backup.txt",
		"/Users/gaffer/git/protocol2/002_packet_fragmentation_and_reassembly",
		"/Users/gaffer/git/protocol/src/Core/Core.h",
		"/Users/gaffer/git/protocol/src/Core/Core.cpp",
		"/Users/gaffer/git/protocol2/001_serializing_packets.cpp",
		"/Users/gaffer/git/protocol2/serializing_packets.cpp",
		"/Users/gaffer/git/protocol/tests/Protocol/TestPackets.h",
		"/Users/gaffer/git/protocol/src/Protocol/PacketFactory.h",
		"/Users/gaffer/git/protocol/src/Protocol/Packet.h",
		"/Users/gaffer/git/protocol/src/Protocol/Object.h",
		"/Users/gaffer/git/protocol/tests/Protocol/TestStream.cpp",
		"/Users/gaffer/git/protocol/tests/Protocol/TestBitPacker.cpp",
		"/Users/gaffer/git/cubes/const.h",
		"/Users/gaffer/git/cubes/core.h",
		"/Users/gaffer/git/protocol/tests/ClientServer/SoakClientServer.cpp",
		"/Users/gaffer/git/protocol/src/ClientServer/Client.cpp",
		"/Users/gaffer/git/protocol/src/Network/Simulator.cpp",
		"/Users/gaffer/Downloads/10156076287595501.html",
		"/Users/gaffer/git/protocol/TODO",
		"/Users/gaffer/git/protocol/src/Game/Snapshot.h",
		"/Users/gaffer/git/protocol/src/Game/SyncDemo.h",
		"/Users/gaffer/git/protocol/src/Game/SyncDemo.cpp",
		"/Users/gaffer/git/protocol/src/Game/GameChannelStructure.h",
		"/Users/gaffer/git/protocol/CHANGES",
		"/Users/gaffer/git/protocol/BUGS",
		"/Users/gaffer/git/protocol/src/Game/Font.h",
		"/Users/gaffer/git/protocol/external/vectorial/vec3f.h",
		"/usr/local/include/freetype2/ft2build.h",
		"/Users/gaffer/git/protocol/src/Game/DemoManager.cpp",
		"/Users/gaffer/git/protocol/NEXT",
		"/Users/gaffer/git/protocol/src/Game/CompressionDemo.cpp",
		"/Users/gaffer/git/protocol/src/Game/DeltaDemo.cpp",
		"/Users/gaffer/git/protocol/src/Game/LockstepDemo.h",
		"/Users/gaffer/git/protocol/src/Game/LockstepDemo.cpp",
		"/Users/gaffer/git/protocol/src/Cubes/Simulation.h",
		"/Users/gaffer/git/protocol/src/Game/Cubes.cpp",
		"/Users/gaffer/git/cubes/CHANGES",
		"/Users/gaffer/git/cubes/WOULD BE NICE",
		"/Users/gaffer/git/cubes/packets.h",
		"/Users/gaffer/git/cubes/game.cpp",
		"/Users/gaffer/git/cubes/physics.h",
		"/Users/gaffer/git/cubes/server.cpp",
		"/Users/gaffer/git/cubes/premake4.lua",
		"/Users/gaffer/git/cubes/vectorial/quat4f.h"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"-CHANGES,-TODO,-WOULDBENICE",
			"-CHANGES,-TODO",
			"<open files>",
			"-CHANGES,-TODO",
			"<open files>",
			"-CHANGES,-TODO",
			"<open files>",
			"-CHANGES,-TODO",
			"",
			"-CHANGES,-TODO",
			"-CHANGES,TODO",
			"-CHANGES",
			"-CHANGES -TODO",
			"",
			"*.h,*.cpp",
			"*.h;*.cpp",
			"*.h *.cpp",
			"",
			"sam/*.h;sam/*.cpp",
			"sam/*.h,sam/*.cpp",
			"sam/*.h sam/*.cpp",
			"*.h *.cpp",
			"*.h,*.cpp",
			"*.h;*.cpp",
			"*.h,*.cpp",
			"*.h;*.cpp",
			"*.h *.cpp",
			"",
			"*.h",
			"*.cpp",
			"*.cpp *.h",
			"*.cpp; *.h",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"006",
			"premake",
			"random",
			"random_int",
			"int min",
			"sizeof(",
			"_WINDOWS",
			"sizeof(",
			"printf",
			"NumChunksToSend",
			"NumIterations",
			"WriteBytes",
			"serialize_bytes",
			"ReadPacket",
			"PROTOCOL2_ASSERT_ON_SERIALIZE_CHECK",
			"SERIALIZE_CHECKS",
			"DEBUG",
			"Check",
			"serialize check failed",
			"serialize_check",
			"ReadPacket",
			"WritePacket",
			"printf",
			"MaxChunkSize",
			"uint32_t( ",
			"m_scratch",
			"total",
			"`",
			"ProcessFragment",
			"MaxBufferedFragments",
			"_TYPE",
			"Serialization Strategies",
			"006",
			"Object",
			"rand",
			"serialize_objects",
			"serialize_scene_a",
			"operator",
			"== ",
			"MaxObjects",
			"printf",
			"SERIALIZE_FUNCTION",
			"typedef Stream",
			"serialize_vector",
			"serialize_int",
			"uint64",
			"printf",
			"protocol2.h",
			"printf",
			"TestContext",
			"WriteBytes",
			"SERIALIZE_OBJECT",
			"normal",
			"_internal",
			"WriteBytes",
			"ReadAlign",
			"SerializeAlign",
			"WriteBytes",
			"serialize_int",
			"ReadBytes",
			"WriteBytes",
			"ReadBytes",
			"printf",
			"WriteBits",
			"ReadBits",
			"WriteBits",
			"ReadBits",
			"CRC32_",
			"m_bitIndex",
			"PROTOCOL2_ERROR_CRC32_MISMATCH",
			"crc32 mismatch",
			"m_wordIndex",
			"host_to_network",
			"bits_",
			"980",
			"1293.29",
			"1,293.29",
			"amazon.com",
			"amazon",
			"$50",
			"amazon",
			"deduc",
			"amazon",
			"deduc",
			"50%",
			"tax",
			"TestPacketHeader",
			"TestPacket",
			"PacketHeader",
			"printf",
			"WriteAgg",
			"// todo",
			"ReadPacket(",
			".GetError",
			"TestPacket",
			"printf",
			"Aggregate",
			"numPacketsRead",
			"ReadAgg",
			"Aggregate",
			"BitsProcessed",
			"Aggregate",
			"AlignBits",
			"SerializeAlign",
			"align",
			" % ",
			"GetBytesProcessed",
			"ReadAgg",
			"header",
			"ReadPacket",
			"ReadAgg",
			"AggregatePacket",
			"Agg",
			"Agff",
			"Agg",
			"WriteAgg",
			"WriteAggreg",
			"WritePacket",
			"Factory",
			"numPacketTypes",
			"acked",
			"SlicePacket",
			"chunk mismatch",
			"ack ",
			"ack",
			"ReceivePacket",
			"protocolId",
			"host_to_network"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"SequenceBuffer",
			"sequence_buffer",
			"SequenceBuffer",
			"sliding_window",
			"network_buffer.",
			"NetworkBuffer<",
			"ring_buffer",
			"CORE_ASSERT",
			"CORE_ASSERT_CLOSE",
			"CORE_ASSERT",
			"CORE_CHECK",
			"CORE_ARRAY_NEW",
			"CORE_NEW_ARRAY",
			"CORE_DELETE_ARRAY",
			"CORE_DELETE",
			"CORE_NEW",
			"CORE_ASSERT",
			"Simulator::",
			"memory_globals.",
			"global.",
			"PROTOCOL_CHECK(",
			"PROTOCOL_ASSERT(",
			"assert",
			"bitpacker",
			"    ",
			"namespace sam",
			"namespace sam {",
			"America 2008-2012",
			"netProtocolOld.h"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 600.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/C++11 (Server).sublime-build",
	"project": "protocol2.sublime-project",
	"replace":
	{
		"height": 40.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"prem",
				"premake5.lua"
			],
			[
				"todo",
				"TODO"
			],
			[
				"006",
				"006_reliable_packets.cpp"
			],
			[
				"005",
				"005_packet_aggregation.cpp"
			],
			[
				"004",
				"004_sending_large_blocks_of_data.cpp"
			],
			[
				"003",
				"003_packet_fragmentation_and_reassembly.cpp"
			],
			[
				"002",
				"002_serialization_strategies.cpp"
			],
			[
				"001",
				"001_reading_and_writing_packets.cpp"
			],
			[
				"network2.h",
				"network2.h"
			],
			[
				"changes",
				"CHANGES"
			],
			[
				"test.cpp",
				"test.cpp"
			],
			[
				"premake5.lua",
				"premake5.lua"
			],
			[
				"premake",
				"premake4.lua"
			],
			[
				"premake4.lua",
				"premake4.lua"
			],
			[
				"protocol2h",
				"protocol2.h"
			],
			[
				"protocol2.h",
				"protocol2.h"
			],
			[
				"protocol2h.",
				"protocol2.h"
			],
			[
				"pre",
				"premake4.lua"
			],
			[
				"quat",
				"vectorial/quat4f.h"
			],
			[
				"quat4.f",
				"vectorial/quat4f.h"
			],
			[
				"chang",
				"CHANGES"
			],
			[
				"protoco2l.h",
				"protocol2.h"
			],
			[
				"quat4.h",
				"vectorial/quat4f.h"
			],
			[
				"vec4.h",
				"vectorial/vec4f.h"
			],
			[
				"quat4f.h",
				"vectorial/quat4f.h"
			],
			[
				"test",
				"test.cpp"
			],
			[
				"2",
				"002_serialization_strategies.cpp"
			],
			[
				"work",
				"~/Documents/WORKLOG"
			],
			[
				"done",
				"~/Documents/DONE"
			],
			[
				"",
				"004_packet_aggregation.cpp"
			],
			[
				"proto",
				"protocol2.h"
			],
			[
				"03",
				"003_sending_large_blocks_of_data_quickly_and_reliably.cpp"
			],
			[
				"output.txt",
				"output.txt"
			],
			[
				"001_read",
				"001_reading_and_writing_packets.cpp"
			],
			[
				"net",
				"network2.h"
			],
			[
				"networ",
				"network2.h"
			],
			[
				"network2h.",
				"network2.h"
			],
			[
				"premake4",
				"premake4.lua"
			],
			[
				"010",
				"001_reading_and_writing_packets.cpp"
			],
			[
				"002.",
				"002_packet_fragmentation_and_reassembly.cpp"
			],
			[
				"002_",
				"002_packet_fragmentation_and_reassembly.cpp"
			],
			[
				"protocol.h",
				"protocol2.h"
			],
			[
				"pe",
				"premake4.lua"
			],
			[
				"read",
				"001_reading_and_writing_packets.cpp"
			],
			[
				"protocol",
				"protocol2.h"
			],
			[
				"networksimulator.cpp",
				"src/Network/Simulator.cpp"
			],
			[
				"client.cpp",
				"src/ClientServer/Client.cpp"
			],
			[
				"syncdemo.cpp",
				"src/Game/SyncDemo.cpp"
			],
			[
				"snapshot.h",
				"src/Game/Snapshot.h"
			],
			[
				"syncdemo.h",
				"src/Game/SyncDemo.h"
			],
			[
				"sync",
				"src/Game/SyncDemo.cpp"
			],
			[
				"cganges",
				"src/Game/GameChannelStructure.h"
			],
			[
				"bugs",
				"BUGS"
			],
			[
				"font.h",
				"src/Game/Font.h"
			],
			[
				"vec3fh",
				"external/vectorial/vec3f.h"
			],
			[
				"lockstepdemo.cpp",
				"src/Game/LockstepDemo.cpp"
			],
			[
				"lockstepdemo.h",
				"src/Game/LockstepDemo.h"
			],
			[
				"lokcstep",
				"src/Game/LockstepDemo.cpp"
			],
			[
				"compressiondemoc.pp",
				"src/Game/CompressionDemo.cpp"
			],
			[
				"demomanager.cpp",
				"src/Game/DemoManager.cpp"
			],
			[
				"deltademo.cpp",
				"src/Game/DeltaDemo.cpp"
			],
			[
				"simulation.h",
				"src/Cubes/Simulation.h"
			],
			[
				"cha",
				"CHANGES"
			],
			[
				"wouldbe",
				"WOULD BE NICE"
			],
			[
				"server.cpp",
				"server.cpp"
			],
			[
				"render",
				"render.cpp"
			],
			[
				"packets.h",
				"packets.h"
			],
			[
				"const.h",
				"const.h"
			],
			[
				"world.h",
				"world.h"
			],
			[
				"game.h",
				"game.h"
			],
			[
				"cubes.h",
				"cubes.h"
			],
			[
				"physics",
				"physics_ode.cpp"
			],
			[
				"physics.h",
				"physics.h"
			],
			[
				"wouldbenice",
				"WOULD BE NICE"
			],
			[
				"serer.cpp",
				"server.cpp"
			],
			[
				"vec3f.h",
				"vectorial/vec3f.h"
			],
			[
				"plann",
				"PLANNING"
			],
			[
				"would",
				"WOULD BE NICE"
			],
			[
				"client.h",
				"obj/x64/Release/client/physics_ode.d"
			],
			[
				"game.cpp",
				"game.cpp"
			],
			[
				"wouldenice",
				"WOULD BE NICE"
			],
			[
				"planning",
				"PLANNING"
			],
			[
				"cilent.cpp",
				"client.cpp"
			],
			[
				"network.h",
				"network.h"
			],
			[
				"network.cpp",
				"network.cpp"
			],
			[
				"tood",
				"TODO"
			],
			[
				"packtes.h",
				"packets.h"
			],
			[
				"woludbe",
				"WOULD BE NICE"
			],
			[
				"goal",
				"GOAL"
			],
			[
				"client",
				"client.cpp"
			],
			[
				"plato.mh",
				"platform.h"
			],
			[
				"cliet.cpp",
				"client.cpp"
			],
			[
				"too",
				"TODO"
			],
			[
				"premake.",
				"premake4.lua"
			],
			[
				"netwokr.cpp",
				"network.cpp"
			],
			[
				"netwokr.h",
				"network.h"
			],
			[
				"platform.h",
				"platform.h"
			],
			[
				"render.cpp",
				"src/Game/Render.cpp"
			],
			[
				"view.cpp",
				"src/Cubes/View.cpp"
			],
			[
				"view.h",
				"src/Cubes/View.h"
			],
			[
				"sub",
				"data/shaders/Subroutine.vert"
			],
			[
				"config.h",
				"src/Cubes/Config.h"
			],
			[
				"render.h",
				"src/Game/Render.h"
			],
			[
				"cubes.cpp",
				"src/Game/Cubes.cpp"
			],
			[
				"shadermanager.cpp",
				"src/Game/ShaderManager.cpp"
			],
			[
				"shader",
				"src/Game/ShaderManager.h"
			],
			[
				"mathem",
				"src/Cubes/Mathematics.h"
			],
			[
				"game.",
				"src/Cubes/Game.h"
			],
			[
				"demo",
				"src/Game/DemoManager.cpp"
			],
			[
				"demo.cpp",
				"src/Game/SyncDemo.cpp"
			],
			[
				"simulation.cpp",
				"src/Cubes/Simulation.cpp"
			],
			[
				"core.h",
				"src/Core/Core.h"
			],
			[
				"delta_data.bin",
				"output/delta_data.bin"
			],
			[
				"simulator.cpp",
				"src/Network/Simulator.cpp"
			],
			[
				"com",
				"src/Game/CompressionDemo.cpp"
			],
			[
				"compressiondemo.cpp",
				"src/Game/CompressionDemo.cpp"
			],
			[
				"lockstep.cpp",
				"src/Game/LockstepDemo.cpp"
			],
			[
				"lock",
				"src/Game/LockstepDemo.cpp"
			],
			[
				"game",
				"src/Cubes/Game.h"
			],
			[
				"cubedemo.cpp",
				"src/Game/CubesDemo.cpp"
			],
			[
				"snapshotdemo.cpp",
				"src/Game/SnapshotDemo.cpp"
			],
			[
				"cubesdemo.cpp",
				"src/Game/CubesDemo.cpp"
			],
			[
				"cubesconfig.h",
				"src/Cubes/Config.h"
			],
			[
				"bugn",
				"external/ode/ode/demo/bunny_geom.h"
			],
			[
				"optimize_position.rb",
				"scripts/optimize_position.rb"
			],
			[
				"optimize_relative_quaternion.rb",
				"scripts/optimize_relative_quaternion.rb"
			],
			[
				"opti",
				"scripts/optimize_smallest_three.rb"
			],
			[
				"optimize_smallest_three.rb",
				"scripts/optimize_smallest_three.rb"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 404.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 276.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
