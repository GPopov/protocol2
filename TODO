DONE

    It is really smart to design the system so that zero packets can be written

    That way the empty header acts as a keep-alive, and without thinking you can pump out
    an aggregate packet, even if you don't have any real packets to send.

    Note that this is a property of the NOP design for packet aggregation.

    Every iteration generate up to n packets, including possibility of zero packets.

    Store these packets in an array of ptrs and keep track of number.

    Dummy stub out code to send the packets.

    Delete the array of packets

    Detect error on write aggregate packet and stop iterating.

    Fixed weirdness with WriteAggregatePacket prototype fn. not getting picked up

TODO

    ==================

    Add a packet header


    ==================

    Try to implement the main loop of 004 using the provided interfaces before actually implementing the functions.

    This will let me know if the interfaces make sense or suck.

    At minimum, going to need to adjust how the packet headers are passed in to read aggregate packet, and how read packets
    are returned from that function to caller.

    ==================

    Update reading and writing packets article with a good reason why big endian is used for network order [x][0][0][0] vs. [0][0][0][x]

    Need to go back over both 001 and 002 examples and add soak modes.

    Soaking is essential to guarantee correct behavior.

    ==================
