DONE

    Implement send chunk method

    Implement send slice packet

    Implement process slice packet

    Implemented read packet and added concept of "ready to read" which blocks receiving slices of next chunk until caller reads the received chunk.

    Sketch out send ack packet (going to need a time for last ack sent, eg. once every 1/10th of a second)

    Implement process ack packet

TODO
    
    Cache the number of slices in the previous chunk on chunk receive.

    If a slice comes in from previous chunk, and the num slices for that chunk are not zero, force an ack for that chunk.

    Implement code that sends the forced ack for previous chunk.

    Implement code that sends ack for current received chunk.

    ================    

    Setup packet send and receive loop

    Randomize the length of chunks and the data inside each chunk

    Get n chunks being sent and received, making sure the received data matches the sent data (and the # of bytes matches)

    Consider integrating network simulator into the protocol2.h (generally useful?)

    ==================

    Integrate network simulator into example, because without handling packet loss, out of order, dup etc. this code is not guaranteed to be working

    Perhaps network simulator belongs in protocol2.h

    I would say yes. Lots of different examples are going to need this functionality.

    ==================

    Once example source has good logs, handles packet loss and latency, out of order, etc (soak) then it is ready to publish.

    Example code must have a soak mode, eg. set num iterations to -1

    Verify the soak mode runs indefinitely

    Ready to upload to supporters! :D

    ==================
    